<?php

/**
 * Implements hook_permission().
 */
function back_to_parent_permission() {
  return array(
    'administer btp' => array(
      'title' => t('Administer Back to Parent'),
      'description' => t('Administer the general settings for Back to Parent links'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function back_to_parent_ctools_plugin_directory($module, $plugin) {
  $enable_panel_pane = variable_get('btp_enable_panel_pane', TRUE);
  if (isset($enable_panel_pane)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_theme().
 */
function back_to_parent_theme() {
  // Setup the theme function array, declare template file
  $theme = array();
  // Setup the theme information for the block
  $theme['back_to_parent_link'] = array(
    'variables' => array(
      'btp_link_item' => NULL,
    ),
    'path' => drupal_get_path('module', 'back_to_parent') . '/templates',
    'template' => 'back-to-parent-link',
  );
  // Setup the theme information for the pane
  $theme['panels_pane__back_to_parent'] = array(
    'path' => drupal_get_path('module', 'back_to_parent') . '/templates',
    'template' => 'panels-pane--back-to-parent',
  );

  return $theme;
}

/**
 * Implements hook_menu().
 */
function back_to_parent_menu() {
  $items['admin/config/user-interface/back-to-parent'] = array(
    'title' => t('Back to Parent'),
    'description' => t('Configure the "Back to Parent" link blocks and settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('back_to_parent_settings'),
    'access arguments' => array('administer btp'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'back_to_parent.admin.inc',
    'file path' => drupal_get_path('module', 'back_to_parent'),
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function back_to_parent_block_info() {
  global $language;
  $lang = ($language->language == 'en') ? '' : '_' . $language->language;

  // Get the max # of BTP blocks set by user
  $max_to_display = variable_get('btp_number_of_back_to_parent_blocks', 1);
  $blocks = array();
  // Generate max_to_display # of blocks
  for($i = 1; $i <= $max_to_display; $i++) {
    $blocks['back_to_parent_link_' . $i] = array(
      'info' => t('Back to Parent Link - ' . $i),
      'cache' => DRUPAL_CACHE_GLOBAL,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function back_to_parent_block_view($delta = '') {
  global $language;
  $lang = ($language->language == 'en') ? '' : '_' . $language->language;

  // Get max # of blocks so loop can build different case items
  $max_to_display = variable_get('btp_number_of_back_to_parent_blocks', 1);
  $block = array();
  for($i = 1; $i <= $max_to_display; $i++) {
    switch ($delta) {
      case 'back_to_parent_link_' . $i:
        // Before we set the block, we need to determine if there is an actual parent link.
        $btp_item = btp_get_parent_link_item();
        $view_mode = variable_get('btp_block' . $i . '_view_mode' . $lang);
        $prefix = variable_get('btp_block' . $i . '_prefix' . $lang);
        $suffix = variable_get('btp_block' . $i . '_suffix' . $lang);

        if (!empty($btp_item) && $btp_item['href']) {

          if ($node = btp_get_parent_node_item($btp_item['link_path'])) {
            if (isset($node) && ($view_mode != 'title_as_link') && ($view_mode != 'title_no_link') && ($view_mode != 'separate')) {
            $node = node_view($node, $view_mode = $view_mode, $langcode = NULL);
            $block['subject'] = '';
            $block['content'] = drupal_render($node);
            }
            elseif ($view_mode == 'title_no_link') {
              $block['subject'] = '';
              $block['content'] = $prefix . $btp_item['title'] . $suffix . ' no-link';
            }
            elseif ($view_mode == 'separate') {
              $block['subject'] = '';
              $block['content'] =  t('Title: ') . $btp_item['title'] . '<br/>' . t('URL: ') . l($btp_item['href'], $btp_item['href'], array('attributes' => array('class' => 'back-to-link-separate')));
            }
            else {
              $block['subject'] = '';
              $block['content'] = l($prefix . $btp_item['title'] . $suffix, $btp_item['href'], array('attributes' => array('class' => 'back-to-link-else')));
            }
          }
          else {
            $btp_item['localized_options'] = (isset($btp_item['localized_options'])) ? $btp_item['localized_options'] : array();
            $btp_item['link_path'] = (isset($btp_item['link_path'])) ? $btp_item['link_path'] : '';
            $btp_item['link_title'] = (isset($btp_item['link_title'])) ? $btp_item['link_title'] : '';

            // Get prefix and suffix set in item array.
            $btp_item['btp_prefix'] = $prefix ? $prefix . ' ' : '';
            $btp_item['btp_suffix'] = $suffix ? ' ' . $suffix : '';

            if (isset($btp_item['href'])) {
              $block['subject'] = '';
              // Set block settings, get menu parent item
              $block['content'] = array(
                '#theme' => 'back_to_parent_link',
                '#btp_link_item' => $btp_item,
              );
            }
          }
        }
        // If no parent link, nullify the block so nothing is rendered.
        else {
          $block['subject'] = NULL;
          $block['content'] = NULL;
        }
      break;
    }
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function back_to_parent_block_configure($delta = '') {
  global $language;
  $lang = ($language->language == 'en') ? '' : '_' . $language->language;

  $max_to_display = variable_get('btp_number_of_back_to_parent_blocks', 1);
  $form = array();
  for($i = 1; $i <= $max_to_display; $i++) {
    switch ($delta) {
      // Create the block config form settings for each available block
      case 'back_to_parent_link_' . $i:
        // Prefix to display before the parent item link
        $form['btp_block' . $i . '_prefix' . $lang] = array(
          '#type' => 'textfield',
          '#title' => t('Link Prefix'),
          '#default_value' => variable_get('btp_block' . $i . '_prefix' . $lang, ''),
        );
        // Suffix to display after the parent item link
        $form['btp_block' . $i . '_suffix' . $lang] = array(
          '#type' => 'textfield',
          '#title' => t('Link Suffix'),
          '#default_value' => variable_get('btp_block' . $i . '_suffix' . $lang, ''),
        );

        // Get a list of all view modes, plus a view additional styles
        $displays = array(
          'title_as_link' => array(
            'label' => t('Title as link'),
            'custom settings' => FALSE,
          ),
          'title_no_link' => array(
            'label' => t('Title, no link'),
            'custom settings' => FALSE,
          ),
          'separate' => array(
            'label' => t('Separate title and link'),
            'custom settings' => FALSE,
          ),
        );
        $entity_info = entity_get_info('node');
        $view_modes = $entity_info['view modes'];
        $displays = array_merge($displays, $view_modes);
        foreach($displays as $name => $label) {
          $displays[$name] = $label['label'];
        }

        $form['btp_block' . $i . '_view_mode' . $lang] = array(
          '#type' => 'select',
          '#title' => t('Display type'),
          '#options' => $displays,
          '#default_value' => variable_get('btp_block' . $i . '_view_mode' . $lang, ''),
        );

      break;
    }
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function back_to_parent_block_save($delta = '', $edit = array()) {
  global $language;
  $lang = ($language->language == 'en') ? '' : '_' . $language->language;

  $max_to_display = variable_get('btp_number_of_back_to_parent_blocks', 1);
  for($i = 1; $i <= $max_to_display; $i++) {
    switch ($delta) {
      case 'back_to_parent_link_' . $i:
        // Save the options set in the block config
        variable_set('btp_block' . $i . '_prefix' . $lang, $edit['btp_block' . $i . '_prefix' . $lang]);
        variable_set('btp_block' . $i . '_suffix' . $lang, $edit['btp_block' . $i . '_suffix' . $lang]);
        variable_set('btp_block' . $i . '_view_mode' . $lang, $edit['btp_block' . $i . '_view_mode' . $lang]);
      break;
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function back_to_parent_preprocess_page(&$vars) {
  $enable_page_variable = variable_get('btp_enable_page_variable', TRUE);
  if (isset($enable_page_variable)) {
    $parent_link_item = btp_get_parent_link_item();
    if (!empty($parent_link_item)) {
      $attributes = (!empty($parent_link_item['localized_options'])) ? $parent_link_item['localized_options'] : $parent_link_item['options'];
      $back_to_parent_item = l($parent_link_item['link_title'], $parent_link_item['link_path'], array($attributes));
      $vars['btp_link'] = $back_to_parent_item;
    }
  }
}

/**
 * Return an array of the current pages closest parent link.
 */
function btp_get_parent_link_item() {
  // We need the current active trail of the current page
  $trail = menu_get_active_trail();
  // If a trail exists, we need the last one (that is the current page).
  $current_menu_item = (isset($trail)) ? array_pop($trail) : NULL;
  // If there is a parent, we need its id.
  $plid = ((!empty($current_menu_item)) && (isset($current_menu_item['plid']))) ? $current_menu_item['plid'] : NULL;
  // If there is a parent link id and it does not equal 0, use it to load the parent menu item array.
  $plid_item = ((!empty($plid)) && ($plid != 0)) ? menu_link_load($plid) : NULL;

  return $plid_item;
}

/**
 * Return the node object of the parent menu id.
 */
function btp_get_parent_node_item($path) {
  $path = menu_get_item($path);
  $node = isset($path['original_map'][1]) ? node_load($path['original_map'][1]) : NULL;
  if (empty($node)) {
    return FALSE;
  }
  return $node;
}
